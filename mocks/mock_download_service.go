// Code generated by MockGen. DO NOT EDIT.
// Source: DownloadService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "eagle-eye/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// DownloadHeader mocks base method.
func (m *MockDownloader) DownloadHeader(request *entities.ScanRequest, headerSize uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadHeader", request, headerSize)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DownloadHeader indicates an expected call of DownloadHeader.
func (mr *MockDownloaderMockRecorder) DownloadHeader(request, headerSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadHeader", reflect.TypeOf((*MockDownloader)(nil).DownloadHeader), request, headerSize)
}

// DownloadSingleFile mocks base method.
func (m *MockDownloader) DownloadSingleFile(request *entities.ScanRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadSingleFile", request)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DownloadSingleFile indicates an expected call of DownloadSingleFile.
func (mr *MockDownloaderMockRecorder) DownloadSingleFile(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSingleFile", reflect.TypeOf((*MockDownloader)(nil).DownloadSingleFile), request)
}
