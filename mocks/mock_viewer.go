// Code generated by MockGen. DO NOT EDIT.
// Source: Viewer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "eagle-eye/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockViewer is a mock of Viewer interface.
type MockViewer struct {
	ctrl     *gomock.Controller
	recorder *MockViewerMockRecorder
}

// MockViewerMockRecorder is the mock recorder for MockViewer.
type MockViewerMockRecorder struct {
	mock *MockViewer
}

// NewMockViewer creates a new mock instance.
func NewMockViewer(ctrl *gomock.Controller) *MockViewer {
	mock := &MockViewer{ctrl: ctrl}
	mock.recorder = &MockViewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewer) EXPECT() *MockViewerMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockViewer) SendMessage(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockViewerMockRecorder) SendMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockViewer)(nil).SendMessage), message)
}

// Show mocks base method.
func (m *MockViewer) Show(description string, results map[string]entities.ScanResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", description, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// Show indicates an expected call of Show.
func (mr *MockViewerMockRecorder) Show(description, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockViewer)(nil).Show), description, results)
}
