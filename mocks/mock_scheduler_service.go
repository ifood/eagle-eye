// Code generated by MockGen. DO NOT EDIT.
// Source: ScheduleService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "eagle-eye/domain/entities"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// GetSchedule mocks base method.
func (m *MockScheduler) GetSchedule(objectKeyOrScanID string) (entities.ScheduleItemWithState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", objectKeyOrScanID)
	ret0, _ := ret[0].(entities.ScheduleItemWithState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockSchedulerMockRecorder) GetSchedule(objectKeyOrScanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockScheduler)(nil).GetSchedule), objectKeyOrScanID)
}

// IsScheduledScan mocks base method.
func (m *MockScheduler) IsScheduledScan(bucket string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsScheduledScan", bucket)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsScheduledScan indicates an expected call of IsScheduledScan.
func (mr *MockSchedulerMockRecorder) IsScheduledScan(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsScheduledScan", reflect.TypeOf((*MockScheduler)(nil).IsScheduledScan), bucket)
}

// Schedule mocks base method.
func (m *MockScheduler) Schedule(filename string, reader io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", filename, reader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule.
func (mr *MockSchedulerMockRecorder) Schedule(filename, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockScheduler)(nil).Schedule), filename, reader)
}

// ScheduleObject mocks base method.
func (m *MockScheduler) ScheduleObject(bucket, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleObject", bucket, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleObject indicates an expected call of ScheduleObject.
func (mr *MockSchedulerMockRecorder) ScheduleObject(bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleObject", reflect.TypeOf((*MockScheduler)(nil).ScheduleObject), bucket, key)
}

// UpdateSchedule mocks base method.
func (m *MockScheduler) UpdateSchedule(objectKeyOrScanID string, newStatus entities.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", objectKeyOrScanID, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockSchedulerMockRecorder) UpdateSchedule(objectKeyOrScanID, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockScheduler)(nil).UpdateSchedule), objectKeyOrScanID, newStatus)
}
