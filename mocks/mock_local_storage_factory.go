// Code generated by MockGen. DO NOT EDIT.
// Source: LocalStorageFactory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	out "eagle-eye/domain/ports/out"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLocalStorageFactory is a mock of LocalStorageFactory interface.
type MockLocalStorageFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLocalStorageFactoryMockRecorder
}

// MockLocalStorageFactoryMockRecorder is the mock recorder for MockLocalStorageFactory.
type MockLocalStorageFactoryMockRecorder struct {
	mock *MockLocalStorageFactory
}

// NewMockLocalStorageFactory creates a new mock instance.
func NewMockLocalStorageFactory(ctrl *gomock.Controller) *MockLocalStorageFactory {
	mock := &MockLocalStorageFactory{ctrl: ctrl}
	mock.recorder = &MockLocalStorageFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalStorageFactory) EXPECT() *MockLocalStorageFactoryMockRecorder {
	return m.recorder
}

// DestroyStorage mocks base method.
func (m *MockLocalStorageFactory) DestroyStorage(storageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyStorage", storageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyStorage indicates an expected call of DestroyStorage.
func (mr *MockLocalStorageFactoryMockRecorder) DestroyStorage(storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyStorage", reflect.TypeOf((*MockLocalStorageFactory)(nil).DestroyStorage), storageID)
}

// GetLocalStorage mocks base method.
func (m *MockLocalStorageFactory) GetLocalStorage(filesize uint64, compressed bool) (out.LocalStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalStorage", filesize, compressed)
	ret0, _ := ret[0].(out.LocalStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalStorage indicates an expected call of GetLocalStorage.
func (mr *MockLocalStorageFactoryMockRecorder) GetLocalStorage(filesize, compressed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalStorage", reflect.TypeOf((*MockLocalStorageFactory)(nil).GetLocalStorage), filesize, compressed)
}

// GetStorageFromID mocks base method.
func (m *MockLocalStorageFactory) GetStorageFromID(storageID string) (out.LocalStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageFromID", storageID)
	ret0, _ := ret[0].(out.LocalStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageFromID indicates an expected call of GetStorageFromID.
func (mr *MockLocalStorageFactoryMockRecorder) GetStorageFromID(storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageFromID", reflect.TypeOf((*MockLocalStorageFactory)(nil).GetStorageFromID), storageID)
}
