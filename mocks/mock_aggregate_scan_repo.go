// Code generated by MockGen. DO NOT EDIT.
// Source: AggregateScanRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "eagle-eye/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAggregateScanRepository is a mock of AggregateScanRepository interface.
type MockAggregateScanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateScanRepositoryMockRecorder
}

// MockAggregateScanRepositoryMockRecorder is the mock recorder for MockAggregateScanRepository.
type MockAggregateScanRepositoryMockRecorder struct {
	mock *MockAggregateScanRepository
}

// NewMockAggregateScanRepository creates a new mock instance.
func NewMockAggregateScanRepository(ctrl *gomock.Controller) *MockAggregateScanRepository {
	mock := &MockAggregateScanRepository{ctrl: ctrl}
	mock.recorder = &MockAggregateScanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateScanRepository) EXPECT() *MockAggregateScanRepositoryMockRecorder {
	return m.recorder
}

// GetByBucketAndDate mocks base method.
func (m *MockAggregateScanRepository) GetByBucketAndDate(bucket string, day, month int) (entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBucketAndDate", bucket, day, month)
	ret0, _ := ret[0].(entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBucketAndDate indicates an expected call of GetByBucketAndDate.
func (mr *MockAggregateScanRepositoryMockRecorder) GetByBucketAndDate(bucket, day, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBucketAndDate", reflect.TypeOf((*MockAggregateScanRepository)(nil).GetByBucketAndDate), bucket, day, month)
}

// GetByDate mocks base method.
func (m *MockAggregateScanRepository) GetByDate(day, month int) (map[string]entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDate", day, month)
	ret0, _ := ret[0].(map[string]entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDate indicates an expected call of GetByDate.
func (mr *MockAggregateScanRepositoryMockRecorder) GetByDate(day, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDate", reflect.TypeOf((*MockAggregateScanRepository)(nil).GetByDate), day, month)
}

// GetByMonth mocks base method.
func (m *MockAggregateScanRepository) GetByMonth(month int) (map[string]entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMonth", month)
	ret0, _ := ret[0].(map[string]entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMonth indicates an expected call of GetByMonth.
func (mr *MockAggregateScanRepositoryMockRecorder) GetByMonth(month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMonth", reflect.TypeOf((*MockAggregateScanRepository)(nil).GetByMonth), month)
}

// Save mocks base method.
func (m *MockAggregateScanRepository) Save(arg0 entities.ScanResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAggregateScanRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAggregateScanRepository)(nil).Save), arg0)
}
